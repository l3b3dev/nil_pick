# import libraries
import numpy as np
import matplotlib.pyplot as plt
import collections

map_=np.load('./info_from_preproc/short_map.npy', allow_pickle=True)  

clusters=[  4803, 3744,  504, 4115, 3396,  856, 4117,  866, 4121, 4113,  835,  958,  930, 4246, 1014, 1018, 1010,  257, 1205, 1193, 4804, 3569, 1249, 5029, 1325, 1439, 1413, 3334,
                1496, 3348, 3327, 3289, 3317, 4868, 3874, 3293, 1584, 1580, 3796, 1601, 1630,  253, 3113, 3131, 1274, 1643, 5020, 3173,  269, 3426, 4441,  337, 1955, 3727, 1959, 1946,
                1965, 4688, 1399, 3468, 4909, 4911,  721, 4913, 2010, 2039, 2028, 2019, 2027, 2047, 898 , 4894,  516, 3683,  520, 3909, 4142, 4474, 4266, 4061, 4259, 2604, 3407, 3013,
                4181, 2599, 2274, 4138, 2590, 2439, 3140, 3384, 5104, 4605, 2438, 4973, 2505, 3398, 4051, 3978, 2510, 4375, 2506, 3397, 5065, 3721, 3726, 3710, 3949, 3431, 2584, 3730,
                3437, 3485, 3737, 3711, 3803, 3907, 2598, 2586, 2596, 2342, 3741, 3709, 3728, 3706, 3705,  777, 2582, 3451, 3972, 5000, 4077, 4079, 2770, 4668, 3948, 3722,  736, 2867,
                 734, 2595,  744, 2591, 2874, 3758,  761, 3548,  287, 2885, 3682, 2975, 4470, 4377, 3759,  842,  829, 4399,  938, 4883, 1180, 3570, 3571, 3573, 3568, 1401, 3350, 3326,
                 262, 3285, 3347, 3304, 3280, 3346, 3561, 3281, 3320, 4056, 1605, 4081, 3247, 1634,  243, 3793, 1197, 4196, 1681, 1646,  256, 1966, 1952, 4111, 1954, 4924, 2009, 2008,
                 280, 3523, 4878, 2589,  519, 4060, 4068, 2997, 1929, 2325, 3733, 3434, 3430, 3708, 3736, 3716, 3729, 4100, 2679, 4402, 2735,  759, 2756, 2748, 3466, 3449, 4466, 2978,
                3917,  729,  886,  868, 4177,  945, 4247, 1008, 4357, 1229, 1272, 3576, 3574, 1323, 1420, 1421, 3345, 3363, 1600, 4052, 4433, 1655, 1680, 3185, 3170,  388, 4781, 8645,
                 343,  335, 3919, 2069, 2021, 1993,  895, 3908,  479,   51, 4363, 3763, 2593, 4383, 3439, 2488, 4048, 5064, 2592, 3717, 4886, 3704, 2602, 2837, 3798, 5009, 5056, 4665,
                2785, 2717, 2890, 3893, 4465, 2697, 3014, 3000,  860, 3391, 4249, 1001, 1174, 1170, 4271, 1350, 3117, 1422, 3980,  250,  240, 1653, 1641, 1651, 3428, 1977, 3521, 3470,
                2033, 1069, 3524, 5003, 3525, 3361, 4073, 1436, 2272, 5132, 2581,  750, 2603, 3718, 3714, 4374, 2663, 2648, 4662, 2794, 2773,  754,  858, 1259, 1349, 3308, 4435, 5141,
                 360, 4890, 4896, 2064, 2024, 3385, 2063, 4892,  896, 4834, 5107, 5007,  522, 4070, 2270, 3719, 3725, 3457, 4078, 4968, 2714, 4331, 3943, 4882, 5111, 1006, 1203, 1273,
                1236, 1405, 3373, 3314, 3295,  338, 5161, 5108, 5106,  263,  258, 4364, 5063, 4741, 4099, 2781, 3745, 1185, 1265, 1245, 1243, 4129, 1425, 1428, 1407, 5036, 3530,  275,
                1644, 1672, 4910,  260,  517, 4606, 5062, 2587, 3402, 4691, 2757,  861, 1241, 1255, 5034, 3306,  248, 3369,  244, 4189,  720, 4893, 2037, 3158,  251, 4742, 3413, 3471,
                3986, 3244, 4620, 4339, 1262, 1352, 3321, 1636, 1688, 5037, 1647, 4895,  894, 4058, 3971, 4677, 3732, 1099, 1267, 1289, 3492,  254, 5140, 3139, 3712, 2662, 4976, 4974,
                3588, 4471, 4914, 4885, 4613, 3531, 5142, 1948, 2061, 4695, 2784, 3713, 1260, 1329, 1666, 1961,  723, 3245,  482, 4365, 3875, 4373, 3511, 4501, 3169, 3159, 3335, 3277,
                3975,  361, 2197, 3762, 2792, 2979, 1220, 3222, 5130,  737, 2653, 4467, 3324, 2665, 2791, 3331, 4203, 3974, 4673,  879, 1165, 4819, 4820, 4994, 3814, 3183, 4477, 4891,
                2208, 4366, 4967, 2734, 4358, 5033, 8715, 4344,  604, 3106, 2654, 2790, 4080, 4502, 4343, 6606, 2056, 1034, 1167, 1412, 1078, 3467, 1195, 1418, 1402, 3328, 3372, 3292,
                4469, 3020, 3171, 3291, 3182, 5143, 4971,  346, 3362,  274, 3315, 2308, 1315, 1414, 3367, 4815, 2796, 5128, 3536, 1642, 4372, 1433, 1432, 4821, 3186, 4670, 3360, 4696,
                 163, 3220, 5060, 5010, 4678, 3358, 4200, 3177, 3888, 8683, 4814, 2797, 1264, 3114, 3303, 1939, 4318, 4970, 4663, 2011, 1076, 2752, 5119, 1430, 2795, 3954, 1427, 3349,
                4898, 4993, 2655, 4666, 2750, 1649, 1254, 3325, 3699, 2801, 1200, 4682, 4182, 1960, 3124, 4553, 4889, 4371, 3126, 2217, 2799, 1283, 5039, 4242, 1204, 4072, 1724, 3311,
                3313, 5030, 2676, 3120, 2670, 4692, 5144, 2656, 1330, 4905, 1063, 4349, 3180, 3989, 4672, 1086, 1251, 1235, 1411, 1426, 3344, 3751, 4980,  357, 4155, 4664, 4091, 1306,
                1403, 3368, 4463, 4478, 1435, 4069, 3458, 2800, 5026, 4334,  816, 1423,  336, 1440, 4999, 5032, 4552, 8714,   72, 3984, 1261, 1351, 2012, 4345, 4464, 3392, 1286, 1178,
                4671, 1633,  378,  202, 4330, 5061, 4897,  427, 4877, 3121, 3197, 1297, 4669, 1215, 1281, 4881, 3427, 4981, 1253,  468, 4066, 4918, 4873, 5019, 4109, 2798, 4346, 2174,
                1429, 5038, 1173, 4139,  385, 3286,  478]

def plotbar(dct, L, LP_rat, method, cluster, precision, pop=False):

    # Define feature names
    Col_names=[ "orig_sales_order_line_num", "unit_price_amt", "item_wt_qty", "order_qty", "price_match_amt", "promo_amt", "po_line_num", "item_wt_uom_cd", "fulfmt_type_desc"]
 
    Feature_names= ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8'] 

    textstr=str()
    feature_iter=[]
          
    # define list with feature description
    for j in range(len(Feature_names)):
         feature_iter.append( (Feature_names[j] + '='+ Col_names[j] ))                       

    #
    textstr = '\n'.join(
                     (  feature_iter[0],
                        feature_iter[1], 
                        feature_iter[2],
                        feature_iter[3],
                        feature_iter[4],
                        feature_iter[5],
                        feature_iter[6],
                        feature_iter[7],
                        feature_iter[8]
                      )
                    )

    #eval_meth = [ 'weight', 'gain', 'cover', 'total_cover', 'total_gain' ] 
    eval_meth=['gain']
    #dct=bst.get_score(importance_type=str(method)) 
    if pop is True:
       for i in range(len(Col_names)):
           if Feature_names[i] in dct:
              dct[ Col_names[i] ] = dct.pop( Feature_names[i] )

    sorted_dct = sorted(dct.items(), key=lambda kv: kv[1], reverse=True)
    sorted_dict = collections.OrderedDict(sorted_dct)
    #print( list(sorted_dict.values() ) )
    #print( list(sorted_dict.values() ) / np.sum( list(sorted_dict.values() ) ) )  
    sorted_keys = list(sorted_dict.keys() ) 
    print(sorted_keys)

    print('This is the first most important feature:', sorted_keys[0])
    print('This is the second most important feature:', sorted_keys[1])

    l_first=Feature_names.index(sorted_keys[0])
    l_second=Feature_names.index(sorted_keys[1])

    print('This is the first: ' , l_first, Col_names[l_first] )
    print('This is the second: ', l_second, Col_names[l_second] )

    #
    plt.bar(sorted_dict.keys(), (list(sorted_dict.values() ) / np.sum(list(sorted_dict.values() ))*100   ), color='b')
    ###plt.bar(dct.keys(), (list(dct.values() ) / np.sum(list(dct.values() ))*100   ), color='b')
    plt.xlabel('Feature')
    plt.ylabel('Importance (%)')
    plt.title( str(map_[clusters.index(cluster)]) +' precision: ' + str( '%.2f' % (precision*100) ) + str('%') + ' using ' + str(L)+' data rows' + '\n ratio of nil-pick count to total events = ' + str( '%.2f' % (LP_rat*100) )+str('%') ) 

    ax=plt.axes()
    ax.grid(which='both', axis='y', linestyle='--')
    #ax.yaxis.grid(True)

    plt.xticks(rotation=0)
    try:
        plt.savefig('./category_plots/category: ' + str(map_[clusters.index(cluster)]) +'.png')
        plt.close()    
    #plt.show()
    except:
        print('The plot for this category was not created!') 
        plt.close()


    return l_first, Col_names[l_first], l_second, Col_names[l_second]





